
git init
git branch <name>  --to create branch 



** checkout Branches
git branch -b <name> --to create and checkout to branch 
git switch -c <name>  
- to switch branch
git switch <branch_name>
git checkout <branch_name>

-force checkout when you don't need to commit local changes 
git checkout -f other_branch


** Manipulate Branches

- to delete branch 
git branch -d <branch_name>

- to force delete a branch 
git branch -D branch_name

-to rename a branch 
git branch -m new_branch_name



** Merging  Branches **

git merge branch_name -- first switch to branch where  you want to merge changes and use this command

-- if conflict occured resolve the conflicts in the file and add the file and 
git add .
git merge --continue


** squash Merging

Squash merging combines multiple commits from a feature branch into a single commit when merging into the main branch.


# Switch to the branch you want to merge into
git checkout master

# Perform a squash merge
git merge --squash feature_branch

# Commit the squashed changes
git commit -m "Merged feature_branch with squash"


** Abort Merge

git merge --abort

** rebase ** used for moving or combining commits

git checkout feature_branch
git rebase master

**  git view contents of file in apartivuar commit 
git show <commit_hash>:<pothtoyourfile>


** interactive commit ** 
git checkout feature_branch
git rebase -i master






git branch -- to list all branches
git branch -vv --to show branches and their upstreams


**stashing changes
git stash  save "message" -- to save changes that are not yet commited in working directory
git stash --list --to list all the stashes
git stash apply --to apply the last stash



git branch -u remote_name/remote_branch --to set upstream repo for the branch 



** diff
git diff --compares staging and working area
git diff --staged  - compares the staging and previous commit




git add [file] --to stage file
git status -- to view the staged file no yet commited
git log --to view the github commit history
git commit -m <message> --to commit the files in the staged area

** untract files
git rm --cached file_name

** files to not track should be listed in gitignore

** Viewing Commits
git log -p -n  -- show additional details like lines added and lines deleted for the loast n commits
git log --stat    #shows each file insertions and dleletions    
git log --pretty=short #show commit and authors
git log --pretty=oneline #shows only the commits and thier corresponging messages
git log --pretty=full # shows author, commit, date and commit msg
git log --since=2.days #shows commit for last two days {2.days,2.months,2.years}

git commit --ammed ---to ammend change to the last commit

** unstaging
git restore --staged filename
** match workdir with last commit
git checkout -f

** restore file to the last commit version
git checkout  <commithash> -- file_name if commit hash is specified it moves to that version


